{"remainingRequest":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\86152\\Desktop\\casual\\iview-admin\\src\\components\\drag-drawer\\drag-drawer.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\src\\components\\drag-drawer\\drag-drawer.vue","mtime":1575545426844},{"path":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport RenderDom from '@/libs/render-dom'\r\nimport DragDrawerTrigger from './drag-drawer-trigger.vue'\r\nimport Mixin from './mixin'\r\nimport { on, off } from '@/libs/tools'\r\nimport './index.less'\r\nexport default {\r\n  name: 'BDrawer',\r\n  components: {\r\n    RenderDom,\r\n    DragDrawerTrigger\r\n  },\r\n  mixins: [Mixin],\r\n  props: {\r\n    value: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    width: {\r\n      type: [String, Number],\r\n      default: 256\r\n    },\r\n    // 是否可拖动修改宽度\r\n    draggable: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    // 最小拖动宽度\r\n    minWidth: {\r\n      type: [String, Number],\r\n      default: 256\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      canMove: false,\r\n      wrapperWidth: 0,\r\n      wrapperLeft: 0\r\n    }\r\n  },\r\n  computed: {\r\n    outerClasses () {\r\n      const classesArray = [\r\n        `${this.prefix}-wrapper`,\r\n        this.canMove ? 'no-select pointer-events-none' : ''\r\n      ]\r\n      return classesArray.join(' ')\r\n    },\r\n    placement () {\r\n      return this.$attrs.placement\r\n    },\r\n    innerWidth () {\r\n      const width = this.width\r\n      return width <= 100 ? (this.wrapperWidth * width) / 100 : width\r\n    },\r\n    triggerStyle () {\r\n      return {\r\n        [this.placement]: `${this.innerWidth}px`,\r\n        position: this.$attrs.inner ? 'absolute' : 'fixed'\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    handleInput (status) {\r\n      this.$emit('input', status)\r\n    },\r\n    handleTriggerMousedown (event) {\r\n      this.canMove = true\r\n      this.$emit('on-resize-start')\r\n      // 防止鼠标选中抽屉中文字，造成拖动trigger触发浏览器原生拖动行为\r\n      window.getSelection().removeAllRanges()\r\n    },\r\n    handleMousemove (event) {\r\n      if (!this.canMove) return\r\n      // 更新容器宽度和距离左侧页面距离，如果是window则距左侧距离为0\r\n      this.setWrapperWidth()\r\n      const left = event.pageX - this.wrapperLeft\r\n      // 如果抽屉方向为右边，宽度计算需用容器宽度减去left\r\n      let width = this.placement === 'right' ? this.wrapperWidth - left : left\r\n      // 限定做小宽度\r\n      width = Math.max(width, parseFloat(this.minWidth))\r\n      event.atMin = width === parseFloat(this.minWidth)\r\n      // 如果当前width不大于100，视为百分比\r\n      if (width <= 100) width = (width / this.wrapperWidth) * 100\r\n      this.$emit('update:width', parseInt(width))\r\n      this.$emit('on-resize', event)\r\n    },\r\n    handleMouseup (event) {\r\n      this.canMove = false\r\n      this.$emit('on-resize-end')\r\n    },\r\n    setWrapperWidth () {\r\n      const {\r\n        width,\r\n        left\r\n      } = this.$refs.drawerWrapper.$el.getBoundingClientRect()\r\n      this.wrapperWidth = width\r\n      this.wrapperLeft = left\r\n    }\r\n  },\r\n  mounted () {\r\n    on(document, 'mousemove', this.handleMousemove)\r\n    on(document, 'mouseup', this.handleMouseup)\r\n    this.setWrapperWidth()\r\n  },\r\n  beforeDestroy () {\r\n    off(document, 'mousemove', this.handleMousemove)\r\n    off(document, 'mouseup', this.handleMouseup)\r\n  }\r\n}\r\n",{"version":3,"sources":["drag-drawer.vue"],"names":[],"mappingsfile":"drag-drawer.vue","sourceRoot":"src/components/drag-drawer","sourcesContent":["<template>\r\n  <Drawer ref=\"drawerWrapper\"\r\n          :value=\"value\"\r\n          @input=\"handleInput\"\r\n          :width=\"width\"\r\n          :class-name=\"outerClasses\"\r\n          v-bind=\"$attrs\"\r\n          v-on=\"$listeners\">\r\n    <!-- 所有插槽内容显示在这里 ↓ -->\r\n\r\n    <template v-for=\"(slots, slotsName) in $slots\">\r\n      <template v-if=\"slotsName !== 'default'\">\r\n        <render-dom v-for=\"(render, index) in slots\"\r\n                    :key=\"`b_drawer_${slotsName}_${index}`\"\r\n                    :render=\"() => render\"\r\n                    :slot=\"slotsName\">\r\n        </render-dom>\r\n      </template>\r\n      <template v-else>\r\n        <div :class=\"`${prefix}-body-wrapper`\"\r\n             :key=\"`b_drawer_${slotsName}`\">\r\n          <render-dom v-for=\"(render, index) in slots\"\r\n                      :key=\"`b_drawer_${slotsName}_${index}`\"\r\n                      :render=\"() => render\"\r\n                      :slot=\"slotsName\">\r\n          </render-dom>\r\n        </div>\r\n      </template>\r\n    </template>\r\n    <!-- 所有插槽内容显示在这里 ↑ -->\r\n    <div v-if=\"draggable\"\r\n         :style=\"triggerStyle\"\r\n         :class=\"`${prefix}-trigger-wrapper`\"\r\n         @mousedown=\"handleTriggerMousedown\">\r\n      <slot name=\"trigger\">\r\n        <drag-drawer-trigger></drag-drawer-trigger>\r\n      </slot>\r\n    </div>\r\n    <div v-if=\"$slots.footer\"\r\n         :class=\"`${prefix}-footer`\">\r\n      <slot name=\"footer\"></slot>\r\n    </div>\r\n  </Drawer>\r\n</template>\r\n\r\n<script>\r\nimport RenderDom from '@/libs/render-dom'\r\nimport DragDrawerTrigger from './drag-drawer-trigger.vue'\r\nimport Mixin from './mixin'\r\nimport { on, off } from '@/libs/tools'\r\nimport './index.less'\r\nexport default {\r\n  name: 'BDrawer',\r\n  components: {\r\n    RenderDom,\r\n    DragDrawerTrigger\r\n  },\r\n  mixins: [Mixin],\r\n  props: {\r\n    value: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    width: {\r\n      type: [String, Number],\r\n      default: 256\r\n    },\r\n    // 是否可拖动修改宽度\r\n    draggable: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    // 最小拖动宽度\r\n    minWidth: {\r\n      type: [String, Number],\r\n      default: 256\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      canMove: false,\r\n      wrapperWidth: 0,\r\n      wrapperLeft: 0\r\n    }\r\n  },\r\n  computed: {\r\n    outerClasses () {\r\n      const classesArray = [\r\n        `${this.prefix}-wrapper`,\r\n        this.canMove ? 'no-select pointer-events-none' : ''\r\n      ]\r\n      return classesArray.join(' ')\r\n    },\r\n    placement () {\r\n      return this.$attrs.placement\r\n    },\r\n    innerWidth () {\r\n      const width = this.width\r\n      return width <= 100 ? (this.wrapperWidth * width) / 100 : width\r\n    },\r\n    triggerStyle () {\r\n      return {\r\n        [this.placement]: `${this.innerWidth}px`,\r\n        position: this.$attrs.inner ? 'absolute' : 'fixed'\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    handleInput (status) {\r\n      this.$emit('input', status)\r\n    },\r\n    handleTriggerMousedown (event) {\r\n      this.canMove = true\r\n      this.$emit('on-resize-start')\r\n      // 防止鼠标选中抽屉中文字，造成拖动trigger触发浏览器原生拖动行为\r\n      window.getSelection().removeAllRanges()\r\n    },\r\n    handleMousemove (event) {\r\n      if (!this.canMove) return\r\n      // 更新容器宽度和距离左侧页面距离，如果是window则距左侧距离为0\r\n      this.setWrapperWidth()\r\n      const left = event.pageX - this.wrapperLeft\r\n      // 如果抽屉方向为右边，宽度计算需用容器宽度减去left\r\n      let width = this.placement === 'right' ? this.wrapperWidth - left : left\r\n      // 限定做小宽度\r\n      width = Math.max(width, parseFloat(this.minWidth))\r\n      event.atMin = width === parseFloat(this.minWidth)\r\n      // 如果当前width不大于100，视为百分比\r\n      if (width <= 100) width = (width / this.wrapperWidth) * 100\r\n      this.$emit('update:width', parseInt(width))\r\n      this.$emit('on-resize', event)\r\n    },\r\n    handleMouseup (event) {\r\n      this.canMove = false\r\n      this.$emit('on-resize-end')\r\n    },\r\n    setWrapperWidth () {\r\n      const {\r\n        width,\r\n        left\r\n      } = this.$refs.drawerWrapper.$el.getBoundingClientRect()\r\n      this.wrapperWidth = width\r\n      this.wrapperLeft = left\r\n    }\r\n  },\r\n  mounted () {\r\n    on(document, 'mousemove', this.handleMousemove)\r\n    on(document, 'mouseup', this.handleMouseup)\r\n    this.setWrapperWidth()\r\n  },\r\n  beforeDestroy () {\r\n    off(document, 'mousemove', this.handleMousemove)\r\n    off(document, 'mouseup', this.handleMouseup)\r\n  }\r\n}\r\n</script>\r\n"]}]}