{"remainingRequest":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\86152\\Desktop\\casual\\iview-admin\\src\\components\\count-to\\count-to.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\src\\components\\count-to\\count-to.vue","mtime":1575545426840},{"path":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport CountUp from 'countup'\r\nimport './index.less'\r\nexport default {\r\n  name: 'CountTo',\r\n  props: {\r\n    init: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    /**\r\n     * @description 起始值，即动画开始前显示的数值\r\n     */\r\n    startVal: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    /**\r\n     * @description 结束值，即动画结束后显示的数值\r\n     */\r\n    end: {\r\n      type: Number,\r\n      required: true\r\n    },\r\n    /**\r\n     * @description 保留几位小数\r\n     */\r\n    decimals: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    /**\r\n     * @description 分隔整数和小数的符号，默认是小数点\r\n     */\r\n    decimal: {\r\n      type: String,\r\n      default: '.'\r\n    },\r\n    /**\r\n     * @description 动画持续的时间，单位是秒\r\n     */\r\n    duration: {\r\n      type: Number,\r\n      default: 2\r\n    },\r\n    /**\r\n     * @description 动画延迟开始的时间，单位是秒\r\n     */\r\n    delay: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    /**\r\n     * @description 是否禁用easing动画效果\r\n     */\r\n    uneasing: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    /**\r\n     * @description 是否使用分组，分组后每三位会用一个符号分隔\r\n     */\r\n    usegroup: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    /**\r\n     * @description 用于分组(usegroup)的符号\r\n     */\r\n    separator: {\r\n      type: String,\r\n      default: ','\r\n    },\r\n    /**\r\n     * @description 是否简化显示，设为true后会使用unit单位来做相关省略\r\n     */\r\n    simplify: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    /**\r\n     * @description 自定义单位，如[3, 'K+'], [6, 'M+']即大于3位数小于6位数的用k+来做省略\r\n     *              1000即显示为1K+\r\n     */\r\n    unit: {\r\n      type: Array,\r\n      default () {\r\n        return [[3, 'K+'], [6, 'M+'], [9, 'B+']]\r\n      }\r\n    },\r\n    countClass: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    unitClass: {\r\n      type: String,\r\n      default: ''\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      counter: null,\r\n      unitText: ''\r\n    }\r\n  },\r\n  computed: {\r\n    counterId () {\r\n      return `count_to_${this._uid}`\r\n    }\r\n  },\r\n  methods: {\r\n    getHandleVal (val, len) {\r\n      return {\r\n        endVal: parseInt(val / Math.pow(10, this.unit[len - 1][0])),\r\n        unitText: this.unit[len - 1][1]\r\n      }\r\n    },\r\n    transformValue (val) {\r\n      let len = this.unit.length\r\n      let res = {\r\n        endVal: 0,\r\n        unitText: ''\r\n      }\r\n      if (val < Math.pow(10, this.unit[0][0])) res.endVal = val\r\n      else {\r\n        for (let i = 1; i < len; i++) {\r\n          if (val >= Math.pow(10, this.unit[i - 1][0]) && val < Math.pow(10, this.unit[i][0])) res = this.getHandleVal(val, i)\r\n        }\r\n      }\r\n      if (val > Math.pow(10, this.unit[len - 1][0])) res = this.getHandleVal(val, len)\r\n      return res\r\n    },\r\n    getValue (val) {\r\n      let res = 0\r\n      if (this.simplify) {\r\n        let { endVal, unitText } = this.transformValue(val)\r\n        this.unitText = unitText\r\n        res = endVal\r\n      } else {\r\n        res = val\r\n      }\r\n      return res\r\n    }\r\n  },\r\n  mounted () {\r\n    this.$nextTick(() => {\r\n      let endVal = this.getValue(this.end)\r\n      this.counter = new CountUp(this.counterId, this.startVal, endVal, this.decimals, this.duration, {\r\n        useEasing: !this.uneasing,\r\n        useGrouping: this.useGroup,\r\n        separator: this.separator,\r\n        decimal: this.decimal\r\n      })\r\n      setTimeout(() => {\r\n        if (!this.counter.error) this.counter.start()\r\n      }, this.delay)\r\n    })\r\n  },\r\n  watch: {\r\n    end (newVal) {\r\n      let endVal = this.getValue(newVal)\r\n      this.counter.update(endVal)\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["count-to.vue"],"names":[],"mappingsfile":"count-to.vue","sourceRoot":"src/components/count-to","sourcesContent":["<template>\r\n  <div class=\"count-to-wrapper\">\r\n    <slot name=\"left\"/>\r\n    <p class=\"content-outer\"><span :class=\"['count-to-count-text', countClass]\" :id=\"counterId\">{{ init }}</span><i :class=\"['count-to-unit-text', unitClass]\">{{ unitText }}</i></p>\r\n    <slot name=\"right\"/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport CountUp from 'countup'\r\nimport './index.less'\r\nexport default {\r\n  name: 'CountTo',\r\n  props: {\r\n    init: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    /**\r\n     * @description 起始值，即动画开始前显示的数值\r\n     */\r\n    startVal: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    /**\r\n     * @description 结束值，即动画结束后显示的数值\r\n     */\r\n    end: {\r\n      type: Number,\r\n      required: true\r\n    },\r\n    /**\r\n     * @description 保留几位小数\r\n     */\r\n    decimals: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    /**\r\n     * @description 分隔整数和小数的符号，默认是小数点\r\n     */\r\n    decimal: {\r\n      type: String,\r\n      default: '.'\r\n    },\r\n    /**\r\n     * @description 动画持续的时间，单位是秒\r\n     */\r\n    duration: {\r\n      type: Number,\r\n      default: 2\r\n    },\r\n    /**\r\n     * @description 动画延迟开始的时间，单位是秒\r\n     */\r\n    delay: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    /**\r\n     * @description 是否禁用easing动画效果\r\n     */\r\n    uneasing: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    /**\r\n     * @description 是否使用分组，分组后每三位会用一个符号分隔\r\n     */\r\n    usegroup: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    /**\r\n     * @description 用于分组(usegroup)的符号\r\n     */\r\n    separator: {\r\n      type: String,\r\n      default: ','\r\n    },\r\n    /**\r\n     * @description 是否简化显示，设为true后会使用unit单位来做相关省略\r\n     */\r\n    simplify: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    /**\r\n     * @description 自定义单位，如[3, 'K+'], [6, 'M+']即大于3位数小于6位数的用k+来做省略\r\n     *              1000即显示为1K+\r\n     */\r\n    unit: {\r\n      type: Array,\r\n      default () {\r\n        return [[3, 'K+'], [6, 'M+'], [9, 'B+']]\r\n      }\r\n    },\r\n    countClass: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    unitClass: {\r\n      type: String,\r\n      default: ''\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      counter: null,\r\n      unitText: ''\r\n    }\r\n  },\r\n  computed: {\r\n    counterId () {\r\n      return `count_to_${this._uid}`\r\n    }\r\n  },\r\n  methods: {\r\n    getHandleVal (val, len) {\r\n      return {\r\n        endVal: parseInt(val / Math.pow(10, this.unit[len - 1][0])),\r\n        unitText: this.unit[len - 1][1]\r\n      }\r\n    },\r\n    transformValue (val) {\r\n      let len = this.unit.length\r\n      let res = {\r\n        endVal: 0,\r\n        unitText: ''\r\n      }\r\n      if (val < Math.pow(10, this.unit[0][0])) res.endVal = val\r\n      else {\r\n        for (let i = 1; i < len; i++) {\r\n          if (val >= Math.pow(10, this.unit[i - 1][0]) && val < Math.pow(10, this.unit[i][0])) res = this.getHandleVal(val, i)\r\n        }\r\n      }\r\n      if (val > Math.pow(10, this.unit[len - 1][0])) res = this.getHandleVal(val, len)\r\n      return res\r\n    },\r\n    getValue (val) {\r\n      let res = 0\r\n      if (this.simplify) {\r\n        let { endVal, unitText } = this.transformValue(val)\r\n        this.unitText = unitText\r\n        res = endVal\r\n      } else {\r\n        res = val\r\n      }\r\n      return res\r\n    }\r\n  },\r\n  mounted () {\r\n    this.$nextTick(() => {\r\n      let endVal = this.getValue(this.end)\r\n      this.counter = new CountUp(this.counterId, this.startVal, endVal, this.decimals, this.duration, {\r\n        useEasing: !this.uneasing,\r\n        useGrouping: this.useGroup,\r\n        separator: this.separator,\r\n        decimal: this.decimal\r\n      })\r\n      setTimeout(() => {\r\n        if (!this.counter.error) this.counter.start()\r\n      }, this.delay)\r\n    })\r\n  },\r\n  watch: {\r\n    end (newVal) {\r\n      let endVal = this.getValue(newVal)\r\n      this.counter.update(endVal)\r\n    }\r\n  }\r\n}\r\n</script>\r\n"]}]}