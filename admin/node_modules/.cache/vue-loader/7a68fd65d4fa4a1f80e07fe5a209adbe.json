{"remainingRequest":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\86152\\Desktop\\casual\\iview-admin\\src\\view\\components\\org-tree\\components\\org-view.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\src\\view\\components\\org-tree\\components\\org-view.vue","mtime":1575545426906},{"path":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { on, off } from '@/libs/tools'\r\nconst menuList = [\r\n  {\r\n    key: 'edit',\r\n    label: '编辑部门'\r\n  },\r\n  {\r\n    key: 'detail',\r\n    label: '查看部门'\r\n  },\r\n  {\r\n    key: 'new',\r\n    label: '新增子部门'\r\n  },\r\n  {\r\n    key: 'delete',\r\n    label: '删除部门'\r\n  }\r\n]\r\nexport default {\r\n  name: 'OrgView',\r\n  props: {\r\n    zoomHandled: {\r\n      type: Number,\r\n      default: 1\r\n    },\r\n    data: Object\r\n  },\r\n  data () {\r\n    return {\r\n      currentContextMenuId: '',\r\n      orgTreeOffsetLeft: 0,\r\n      orgTreeOffsetTop: 0,\r\n      initPageX: 0,\r\n      initPageY: 0,\r\n      oldMarginLeft: 0,\r\n      oldMarginTop: 0,\r\n      canMove: false\r\n    }\r\n  },\r\n  computed: {\r\n    orgTreeStyle () {\r\n      return {\r\n        transform: `translate(-50%, -50%) scale(${this.zoomHandled}, ${\r\n          this.zoomHandled\r\n        })`,\r\n        marginLeft: `${this.orgTreeOffsetLeft}px`,\r\n        marginTop: `${this.orgTreeOffsetTop}px`\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    handleNodeClick (e, data, expand) {\r\n      expand()\r\n    },\r\n    closeMenu () {\r\n      this.currentContextMenuId = ''\r\n    },\r\n    getBgColor (data) {\r\n      return this.currentContextMenuId === data.id\r\n        ? data.isRoot\r\n          ? '#0d7fe8'\r\n          : '#5d6c7b'\r\n        : ''\r\n    },\r\n    nodeRender (h, data) {\r\n      return (\r\n        <div\r\n          class={[\r\n            'custom-org-node',\r\n            data.children && data.children.length ? 'has-children-label' : ''\r\n          ]}\r\n          on-mousedown={event => event.stopPropagation()}\r\n          on-contextmenu={this.contextmenu.bind(this, data)}\r\n        >\r\n          {data.label}\r\n          <dropdown\r\n            trigger=\"custom\"\r\n            class=\"context-menu\"\r\n            visible={this.currentContextMenuId === data.id}\r\n            nativeOn-click={this.handleDropdownClick}\r\n            on-on-click={this.handleContextMenuClick.bind(this, data)}\r\n            style={{\r\n              transform: `scale(${1 / this.zoomHandled}, ${1 /\r\n                this.zoomHandled})`\r\n            }}\r\n            v-click-outside={this.closeMenu}\r\n          >\r\n            <dropdown-menu slot=\"list\">\r\n              {menuList.map(item => {\r\n                return (\r\n                  <dropdown-item name={item.key}>{item.label}</dropdown-item>\r\n                )\r\n              })}\r\n            </dropdown-menu>\r\n          </dropdown>\r\n        </div>\r\n      )\r\n    },\r\n    contextmenu (data, $event) {\r\n      let event = $event || window.event\r\n      event.preventDefault\r\n        ? event.preventDefault()\r\n        : (event.returnValue = false)\r\n      this.currentContextMenuId = data.id\r\n    },\r\n    setDepartmentData (data) {\r\n      data.isRoot = true\r\n      this.departmentData = data\r\n    },\r\n    mousedownView (event) {\r\n      this.canMove = true\r\n      this.initPageX = event.pageX\r\n      this.initPageY = event.pageY\r\n      this.oldMarginLeft = this.orgTreeOffsetLeft\r\n      this.oldMarginTop = this.orgTreeOffsetTop\r\n      on(document, 'mousemove', this.mousemoveView)\r\n      on(document, 'mouseup', this.mouseupView)\r\n    },\r\n    mousemoveView (event) {\r\n      if (!this.canMove) return\r\n      const { pageX, pageY } = event\r\n      this.orgTreeOffsetLeft = this.oldMarginLeft + pageX - this.initPageX\r\n      this.orgTreeOffsetTop = this.oldMarginTop + pageY - this.initPageY\r\n    },\r\n    mouseupView () {\r\n      this.canMove = false\r\n      off(document, 'mousemove', this.mousemoveView)\r\n      off(document, 'mouseup', this.mouseupView)\r\n    },\r\n    handleDropdownClick (event) {\r\n      event.stopPropagation()\r\n    },\r\n    handleDocumentContextmenu () {\r\n      this.canMove = false\r\n    },\r\n    handleContextMenuClick (data, key) {\r\n      this.$emit('on-menu-click', { data, key })\r\n    }\r\n  },\r\n  mounted () {\r\n    on(document, 'contextmenu', this.handleDocumentContextmenu)\r\n  },\r\n  beforeDestroy () {\r\n    off(document, 'contextmenu', this.handleDocumentContextmenu)\r\n  }\r\n}\r\n",{"version":3,"sources":["org-view.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqfile":"org-view.vue","sourceRoot":"src/view/components/org-tree/components","sourcesContent":["<template>\r\n  <div\r\n    ref=\"dragWrapper\"\r\n    class=\"org-tree-drag-wrapper\"\r\n    @mousedown=\"mousedownView\"\r\n    @contextmenu=\"handleDocumentContextmenu\"\r\n  >\r\n    <div class=\"org-tree-wrapper\" :style=\"orgTreeStyle\">\r\n      <v-org-tree\r\n        v-if=\"data\"\r\n        :data=\"data\"\r\n        :node-render=\"nodeRender\"\r\n        :expand-all=\"true\"\r\n        @on-node-click=\"handleNodeClick\"\r\n        collapsable\r\n      ></v-org-tree>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { on, off } from '@/libs/tools'\r\nconst menuList = [\r\n  {\r\n    key: 'edit',\r\n    label: '编辑部门'\r\n  },\r\n  {\r\n    key: 'detail',\r\n    label: '查看部门'\r\n  },\r\n  {\r\n    key: 'new',\r\n    label: '新增子部门'\r\n  },\r\n  {\r\n    key: 'delete',\r\n    label: '删除部门'\r\n  }\r\n]\r\nexport default {\r\n  name: 'OrgView',\r\n  props: {\r\n    zoomHandled: {\r\n      type: Number,\r\n      default: 1\r\n    },\r\n    data: Object\r\n  },\r\n  data () {\r\n    return {\r\n      currentContextMenuId: '',\r\n      orgTreeOffsetLeft: 0,\r\n      orgTreeOffsetTop: 0,\r\n      initPageX: 0,\r\n      initPageY: 0,\r\n      oldMarginLeft: 0,\r\n      oldMarginTop: 0,\r\n      canMove: false\r\n    }\r\n  },\r\n  computed: {\r\n    orgTreeStyle () {\r\n      return {\r\n        transform: `translate(-50%, -50%) scale(${this.zoomHandled}, ${\r\n          this.zoomHandled\r\n        })`,\r\n        marginLeft: `${this.orgTreeOffsetLeft}px`,\r\n        marginTop: `${this.orgTreeOffsetTop}px`\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    handleNodeClick (e, data, expand) {\r\n      expand()\r\n    },\r\n    closeMenu () {\r\n      this.currentContextMenuId = ''\r\n    },\r\n    getBgColor (data) {\r\n      return this.currentContextMenuId === data.id\r\n        ? data.isRoot\r\n          ? '#0d7fe8'\r\n          : '#5d6c7b'\r\n        : ''\r\n    },\r\n    nodeRender (h, data) {\r\n      return (\r\n        <div\r\n          class={[\r\n            'custom-org-node',\r\n            data.children && data.children.length ? 'has-children-label' : ''\r\n          ]}\r\n          on-mousedown={event => event.stopPropagation()}\r\n          on-contextmenu={this.contextmenu.bind(this, data)}\r\n        >\r\n          {data.label}\r\n          <dropdown\r\n            trigger=\"custom\"\r\n            class=\"context-menu\"\r\n            visible={this.currentContextMenuId === data.id}\r\n            nativeOn-click={this.handleDropdownClick}\r\n            on-on-click={this.handleContextMenuClick.bind(this, data)}\r\n            style={{\r\n              transform: `scale(${1 / this.zoomHandled}, ${1 /\r\n                this.zoomHandled})`\r\n            }}\r\n            v-click-outside={this.closeMenu}\r\n          >\r\n            <dropdown-menu slot=\"list\">\r\n              {menuList.map(item => {\r\n                return (\r\n                  <dropdown-item name={item.key}>{item.label}</dropdown-item>\r\n                )\r\n              })}\r\n            </dropdown-menu>\r\n          </dropdown>\r\n        </div>\r\n      )\r\n    },\r\n    contextmenu (data, $event) {\r\n      let event = $event || window.event\r\n      event.preventDefault\r\n        ? event.preventDefault()\r\n        : (event.returnValue = false)\r\n      this.currentContextMenuId = data.id\r\n    },\r\n    setDepartmentData (data) {\r\n      data.isRoot = true\r\n      this.departmentData = data\r\n    },\r\n    mousedownView (event) {\r\n      this.canMove = true\r\n      this.initPageX = event.pageX\r\n      this.initPageY = event.pageY\r\n      this.oldMarginLeft = this.orgTreeOffsetLeft\r\n      this.oldMarginTop = this.orgTreeOffsetTop\r\n      on(document, 'mousemove', this.mousemoveView)\r\n      on(document, 'mouseup', this.mouseupView)\r\n    },\r\n    mousemoveView (event) {\r\n      if (!this.canMove) return\r\n      const { pageX, pageY } = event\r\n      this.orgTreeOffsetLeft = this.oldMarginLeft + pageX - this.initPageX\r\n      this.orgTreeOffsetTop = this.oldMarginTop + pageY - this.initPageY\r\n    },\r\n    mouseupView () {\r\n      this.canMove = false\r\n      off(document, 'mousemove', this.mousemoveView)\r\n      off(document, 'mouseup', this.mouseupView)\r\n    },\r\n    handleDropdownClick (event) {\r\n      event.stopPropagation()\r\n    },\r\n    handleDocumentContextmenu () {\r\n      this.canMove = false\r\n    },\r\n    handleContextMenuClick (data, key) {\r\n      this.$emit('on-menu-click', { data, key })\r\n    }\r\n  },\r\n  mounted () {\r\n    on(document, 'contextmenu', this.handleDocumentContextmenu)\r\n  },\r\n  beforeDestroy () {\r\n    off(document, 'contextmenu', this.handleDocumentContextmenu)\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n</style>\r\n"]}]}