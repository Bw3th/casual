{"remainingRequest":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\86152\\Desktop\\casual\\iview-admin\\src\\components\\tables\\tables.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\src\\components\\tables\\tables.vue","mtime":1575545426878},{"path":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport TablesEdit from './edit.vue'\r\nimport handleBtns from './handle-btns'\r\nimport './index.less'\r\nexport default {\r\n  name: 'Tables',\r\n  props: {\r\n    value: {\r\n      type: Array,\r\n      default () {\r\n        return []\r\n      }\r\n    },\r\n    columns: {\r\n      type: Array,\r\n      default () {\r\n        return []\r\n      }\r\n    },\r\n    size: String,\r\n    width: {\r\n      type: [Number, String]\r\n    },\r\n    height: {\r\n      type: [Number, String]\r\n    },\r\n    stripe: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    border: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    showHeader: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    highlightRow: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    rowClassName: {\r\n      type: Function,\r\n      default () {\r\n        return ''\r\n      }\r\n    },\r\n    context: {\r\n      type: Object\r\n    },\r\n    noDataText: {\r\n      type: String\r\n    },\r\n    noFilteredDataText: {\r\n      type: String\r\n    },\r\n    disabledHover: {\r\n      type: Boolean\r\n    },\r\n    loading: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    /**\r\n     * @description 全局设置是否可编辑\r\n     */\r\n    editable: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    /**\r\n     * @description 是否可搜索\r\n     */\r\n    searchable: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    /**\r\n     * @description 搜索控件所在位置，'top' / 'bottom'\r\n     */\r\n    searchPlace: {\r\n      type: String,\r\n      default: 'top'\r\n    }\r\n  },\r\n  /**\r\n   * Events\r\n   * @on-start-edit 返回值 {Object} ：同iview中render函数中的params对象 { row, index, column }\r\n   * @on-cancel-edit 返回值 {Object} 同上\r\n   * @on-save-edit 返回值 {Object} ：除上面三个参数外，还有一个value: 修改后的数据\r\n   */\r\n  data () {\r\n    return {\r\n      insideColumns: [],\r\n      insideTableData: [],\r\n      edittingCellId: '',\r\n      edittingText: '',\r\n      searchValue: '',\r\n      searchKey: ''\r\n    }\r\n  },\r\n  methods: {\r\n    suportEdit (item, index) {\r\n      item.render = (h, params) => {\r\n        return h(TablesEdit, {\r\n          props: {\r\n            params: params,\r\n            value: this.insideTableData[params.index][params.column.key],\r\n            edittingCellId: this.edittingCellId,\r\n            editable: this.editable\r\n          },\r\n          on: {\r\n            'input': val => {\r\n              this.edittingText = val\r\n            },\r\n            'on-start-edit': (params) => {\r\n              this.edittingCellId = `editting-${params.index}-${params.column.key}`\r\n              this.$emit('on-start-edit', params)\r\n            },\r\n            'on-cancel-edit': (params) => {\r\n              this.edittingCellId = ''\r\n              this.$emit('on-cancel-edit', params)\r\n            },\r\n            'on-save-edit': (params) => {\r\n              this.value[params.row.initRowIndex][params.column.key] = this.edittingText\r\n              this.$emit('input', this.value)\r\n              this.$emit('on-save-edit', Object.assign(params, { value: this.edittingText }))\r\n              this.edittingCellId = ''\r\n            }\r\n          }\r\n        })\r\n      }\r\n      return item\r\n    },\r\n    surportHandle (item) {\r\n      let options = item.options || []\r\n      let insideBtns = []\r\n      options.forEach(item => {\r\n        if (handleBtns[item]) insideBtns.push(handleBtns[item])\r\n      })\r\n      let btns = item.button ? [].concat(insideBtns, item.button) : insideBtns\r\n      item.render = (h, params) => {\r\n        params.tableData = this.value\r\n        return h('div', btns.map(item => item(h, params, this)))\r\n      }\r\n      return item\r\n    },\r\n    handleColumns (columns) {\r\n      this.insideColumns = columns.map((item, index) => {\r\n        let res = item\r\n        if (res.editable) res = this.suportEdit(res, index)\r\n        if (res.key === 'handle') res = this.surportHandle(res)\r\n        return res\r\n      })\r\n    },\r\n    setDefaultSearchKey () {\r\n      this.searchKey = this.columns[0].key !== 'handle' ? this.columns[0].key : (this.columns.length > 1 ? this.columns[1].key : '')\r\n    },\r\n    handleClear (e) {\r\n      if (e.target.value === '') this.insideTableData = this.value\r\n    },\r\n    handleSearch () {\r\n      this.insideTableData = this.value.filter(item => item[this.searchKey].indexOf(this.searchValue) > -1)\r\n    },\r\n    handleTableData () {\r\n      this.insideTableData = this.value.map((item, index) => {\r\n        let res = item\r\n        res.initRowIndex = index\r\n        return res\r\n      })\r\n    },\r\n    exportCsv (params) {\r\n      this.$refs.tablesMain.exportCsv(params)\r\n    },\r\n    clearCurrentRow () {\r\n      this.$refs.talbesMain.clearCurrentRow()\r\n    },\r\n    onCurrentChange (currentRow, oldCurrentRow) {\r\n      this.$emit('on-current-change', currentRow, oldCurrentRow)\r\n    },\r\n    onSelect (selection, row) {\r\n      this.$emit('on-select', selection, row)\r\n    },\r\n    onSelectCancel (selection, row) {\r\n      this.$emit('on-select-cancel', selection, row)\r\n    },\r\n    onSelectAll (selection) {\r\n      this.$emit('on-select-all', selection)\r\n    },\r\n    onSelectionChange (selection) {\r\n      this.$emit('on-selection-change', selection)\r\n    },\r\n    onSortChange (column, key, order) {\r\n      this.$emit('on-sort-change', column, key, order)\r\n    },\r\n    onFilterChange (row) {\r\n      this.$emit('on-filter-change', row)\r\n    },\r\n    onRowClick (row, index) {\r\n      this.$emit('on-row-click', row, index)\r\n    },\r\n    onRowDblclick (row, index) {\r\n      this.$emit('on-row-dblclick', row, index)\r\n    },\r\n    onExpand (row, status) {\r\n      this.$emit('on-expand', row, status)\r\n    }\r\n  },\r\n  watch: {\r\n    columns (columns) {\r\n      this.handleColumns(columns)\r\n      this.setDefaultSearchKey()\r\n    },\r\n    value (val) {\r\n      this.handleTableData()\r\n      if (this.searchable) this.handleSearch()\r\n    }\r\n  },\r\n  mounted () {\r\n    this.handleColumns(this.columns)\r\n    this.setDefaultSearchKey()\r\n    this.handleTableData()\r\n  }\r\n}\r\n",{"version":3,"sources":["tables.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAofile":"tables.vue","sourceRoot":"src/components/tables","sourcesContent":["<template>\r\n  <div>\r\n    <div v-if=\"searchable && searchPlace === 'top'\" class=\"search-con search-con-top\">\r\n      <Select v-model=\"searchKey\" class=\"search-col\">\r\n        <Option v-for=\"item in columns\" v-if=\"item.key !== 'handle'\" :value=\"item.key\" :key=\"`search-col-${item.key}`\">{{ item.title }}</Option>\r\n      </Select>\r\n      <Input @on-change=\"handleClear\" clearable placeholder=\"输入关键字搜索\" class=\"search-input\" v-model=\"searchValue\"/>\r\n      <Button @click=\"handleSearch\" class=\"search-btn\" type=\"primary\"><Icon type=\"search\"/>&nbsp;&nbsp;搜索</Button>\r\n    </div>\r\n    <Table\r\n      ref=\"tablesMain\"\r\n      :data=\"insideTableData\"\r\n      :columns=\"insideColumns\"\r\n      :stripe=\"stripe\"\r\n      :border=\"border\"\r\n      :show-header=\"showHeader\"\r\n      :width=\"width\"\r\n      :height=\"height\"\r\n      :loading=\"loading\"\r\n      :disabled-hover=\"disabledHover\"\r\n      :highlight-row=\"highlightRow\"\r\n      :row-class-name=\"rowClassName\"\r\n      :size=\"size\"\r\n      :no-data-text=\"noDataText\"\r\n      :no-filtered-data-text=\"noFilteredDataText\"\r\n      @on-current-change=\"onCurrentChange\"\r\n      @on-select=\"onSelect\"\r\n      @on-select-cancel=\"onSelectCancel\"\r\n      @on-select-all=\"onSelectAll\"\r\n      @on-selection-change=\"onSelectionChange\"\r\n      @on-sort-change=\"onSortChange\"\r\n      @on-filter-change=\"onFilterChange\"\r\n      @on-row-click=\"onRowClick\"\r\n      @on-row-dblclick=\"onRowDblclick\"\r\n      @on-expand=\"onExpand\"\r\n    >\r\n      <slot name=\"header\" slot=\"header\"></slot>\r\n      <slot name=\"footer\" slot=\"footer\"></slot>\r\n      <slot name=\"loading\" slot=\"loading\"></slot>\r\n    </Table>\r\n    <div v-if=\"searchable && searchPlace === 'bottom'\" class=\"search-con search-con-top\">\r\n      <Select v-model=\"searchKey\" class=\"search-col\">\r\n        <Option v-for=\"item in columns\" v-if=\"item.key !== 'handle'\" :value=\"item.key\" :key=\"`search-col-${item.key}`\">{{ item.title }}</Option>\r\n      </Select>\r\n      <Input placeholder=\"输入关键字搜索\" class=\"search-input\" v-model=\"searchValue\"/>\r\n      <Button class=\"search-btn\" type=\"primary\"><Icon type=\"search\"/>&nbsp;&nbsp;搜索</Button>\r\n    </div>\r\n    <a id=\"hrefToExportTable\" style=\"display: none;width: 0px;height: 0px;\"></a>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport TablesEdit from './edit.vue'\r\nimport handleBtns from './handle-btns'\r\nimport './index.less'\r\nexport default {\r\n  name: 'Tables',\r\n  props: {\r\n    value: {\r\n      type: Array,\r\n      default () {\r\n        return []\r\n      }\r\n    },\r\n    columns: {\r\n      type: Array,\r\n      default () {\r\n        return []\r\n      }\r\n    },\r\n    size: String,\r\n    width: {\r\n      type: [Number, String]\r\n    },\r\n    height: {\r\n      type: [Number, String]\r\n    },\r\n    stripe: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    border: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    showHeader: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    highlightRow: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    rowClassName: {\r\n      type: Function,\r\n      default () {\r\n        return ''\r\n      }\r\n    },\r\n    context: {\r\n      type: Object\r\n    },\r\n    noDataText: {\r\n      type: String\r\n    },\r\n    noFilteredDataText: {\r\n      type: String\r\n    },\r\n    disabledHover: {\r\n      type: Boolean\r\n    },\r\n    loading: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    /**\r\n     * @description 全局设置是否可编辑\r\n     */\r\n    editable: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    /**\r\n     * @description 是否可搜索\r\n     */\r\n    searchable: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    /**\r\n     * @description 搜索控件所在位置，'top' / 'bottom'\r\n     */\r\n    searchPlace: {\r\n      type: String,\r\n      default: 'top'\r\n    }\r\n  },\r\n  /**\r\n   * Events\r\n   * @on-start-edit 返回值 {Object} ：同iview中render函数中的params对象 { row, index, column }\r\n   * @on-cancel-edit 返回值 {Object} 同上\r\n   * @on-save-edit 返回值 {Object} ：除上面三个参数外，还有一个value: 修改后的数据\r\n   */\r\n  data () {\r\n    return {\r\n      insideColumns: [],\r\n      insideTableData: [],\r\n      edittingCellId: '',\r\n      edittingText: '',\r\n      searchValue: '',\r\n      searchKey: ''\r\n    }\r\n  },\r\n  methods: {\r\n    suportEdit (item, index) {\r\n      item.render = (h, params) => {\r\n        return h(TablesEdit, {\r\n          props: {\r\n            params: params,\r\n            value: this.insideTableData[params.index][params.column.key],\r\n            edittingCellId: this.edittingCellId,\r\n            editable: this.editable\r\n          },\r\n          on: {\r\n            'input': val => {\r\n              this.edittingText = val\r\n            },\r\n            'on-start-edit': (params) => {\r\n              this.edittingCellId = `editting-${params.index}-${params.column.key}`\r\n              this.$emit('on-start-edit', params)\r\n            },\r\n            'on-cancel-edit': (params) => {\r\n              this.edittingCellId = ''\r\n              this.$emit('on-cancel-edit', params)\r\n            },\r\n            'on-save-edit': (params) => {\r\n              this.value[params.row.initRowIndex][params.column.key] = this.edittingText\r\n              this.$emit('input', this.value)\r\n              this.$emit('on-save-edit', Object.assign(params, { value: this.edittingText }))\r\n              this.edittingCellId = ''\r\n            }\r\n          }\r\n        })\r\n      }\r\n      return item\r\n    },\r\n    surportHandle (item) {\r\n      let options = item.options || []\r\n      let insideBtns = []\r\n      options.forEach(item => {\r\n        if (handleBtns[item]) insideBtns.push(handleBtns[item])\r\n      })\r\n      let btns = item.button ? [].concat(insideBtns, item.button) : insideBtns\r\n      item.render = (h, params) => {\r\n        params.tableData = this.value\r\n        return h('div', btns.map(item => item(h, params, this)))\r\n      }\r\n      return item\r\n    },\r\n    handleColumns (columns) {\r\n      this.insideColumns = columns.map((item, index) => {\r\n        let res = item\r\n        if (res.editable) res = this.suportEdit(res, index)\r\n        if (res.key === 'handle') res = this.surportHandle(res)\r\n        return res\r\n      })\r\n    },\r\n    setDefaultSearchKey () {\r\n      this.searchKey = this.columns[0].key !== 'handle' ? this.columns[0].key : (this.columns.length > 1 ? this.columns[1].key : '')\r\n    },\r\n    handleClear (e) {\r\n      if (e.target.value === '') this.insideTableData = this.value\r\n    },\r\n    handleSearch () {\r\n      this.insideTableData = this.value.filter(item => item[this.searchKey].indexOf(this.searchValue) > -1)\r\n    },\r\n    handleTableData () {\r\n      this.insideTableData = this.value.map((item, index) => {\r\n        let res = item\r\n        res.initRowIndex = index\r\n        return res\r\n      })\r\n    },\r\n    exportCsv (params) {\r\n      this.$refs.tablesMain.exportCsv(params)\r\n    },\r\n    clearCurrentRow () {\r\n      this.$refs.talbesMain.clearCurrentRow()\r\n    },\r\n    onCurrentChange (currentRow, oldCurrentRow) {\r\n      this.$emit('on-current-change', currentRow, oldCurrentRow)\r\n    },\r\n    onSelect (selection, row) {\r\n      this.$emit('on-select', selection, row)\r\n    },\r\n    onSelectCancel (selection, row) {\r\n      this.$emit('on-select-cancel', selection, row)\r\n    },\r\n    onSelectAll (selection) {\r\n      this.$emit('on-select-all', selection)\r\n    },\r\n    onSelectionChange (selection) {\r\n      this.$emit('on-selection-change', selection)\r\n    },\r\n    onSortChange (column, key, order) {\r\n      this.$emit('on-sort-change', column, key, order)\r\n    },\r\n    onFilterChange (row) {\r\n      this.$emit('on-filter-change', row)\r\n    },\r\n    onRowClick (row, index) {\r\n      this.$emit('on-row-click', row, index)\r\n    },\r\n    onRowDblclick (row, index) {\r\n      this.$emit('on-row-dblclick', row, index)\r\n    },\r\n    onExpand (row, status) {\r\n      this.$emit('on-expand', row, status)\r\n    }\r\n  },\r\n  watch: {\r\n    columns (columns) {\r\n      this.handleColumns(columns)\r\n      this.setDefaultSearchKey()\r\n    },\r\n    value (val) {\r\n      this.handleTableData()\r\n      if (this.searchable) this.handleSearch()\r\n    }\r\n  },\r\n  mounted () {\r\n    this.handleColumns(this.columns)\r\n    this.setDefaultSearchKey()\r\n    this.handleTableData()\r\n  }\r\n}\r\n</script>\r\n"]}]}