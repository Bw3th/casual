{"remainingRequest":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\86152\\Desktop\\casual\\iview-admin\\src\\components\\tree-select\\tree-select-tree.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\src\\components\\tree-select\\tree-select-tree.vue","mtime":1575545426879},{"path":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport Emitter from 'iview/src/mixins/emitter.js'\r\n\r\nconst arrayEqual = (arr1, arr2) => {\r\n  // 判断数组的长度\r\n  if (arr1.length !== arr2.length) {\r\n    return false\r\n  } else {\r\n    // 循环遍历数组的值进行比较\r\n    for (let i = 0; i < arr1.length; i++) {\r\n      if (arr1[i] !== arr2[i]) {\r\n        return false\r\n      }\r\n    }\r\n    return true\r\n  }\r\n}\r\n\r\nexport default {\r\n  name: 'TreeSelectTree',\r\n  mixins: [Emitter],\r\n  props: {\r\n    data: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    selectedArray: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    loadData: Function\r\n  },\r\n  data () {\r\n    return {\r\n      flatDic: {},\r\n      checkedArray: []\r\n    }\r\n  },\r\n  inject: ['parent'],\r\n  computed: {\r\n    expandAll () {\r\n      return this.parent.$attrs['expand-all']\r\n    }\r\n  },\r\n  watch: {\r\n    data (newData, oldVal) {\r\n      this.updateFlagDic(newData)\r\n      let selectArray = []\r\n      this.selectedArray.forEach(id => {\r\n        if (id in this.flatDic) selectArray.push(id)\r\n      })\r\n      this.$emit('on-check', selectArray.map(id => this.flatDic[id]))\r\n      if (this.expandAll) this.checkData(newData, false, true)\r\n    },\r\n    selectedArray (newVal, oldVal) {\r\n      if (arrayEqual(newVal, oldVal)) return\r\n      const filtedNewVal = newVal.filter(id => id in this.flatDic)\r\n      this.$emit('on-check', filtedNewVal.map(id => this.flatDic[id]))\r\n      this.$emit('on-clear')\r\n      this.$nextTick(() => {\r\n        this.checkData(this.data, true)\r\n      })\r\n    }\r\n  },\r\n  methods: {\r\n    checkEmit (value, label) {\r\n      this.dispatch('iSelect', 'on-select-selected', {\r\n        value,\r\n        label\r\n      })\r\n      this.$emit('on-select-selected', {\r\n        value,\r\n        label\r\n      })\r\n    },\r\n    updateFlagDic (newData) {\r\n      let newFlagDic = {}\r\n      this.setFlagDic(newData, item => {\r\n        newFlagDic[item.id] = item\r\n      })\r\n      this.flatDic = newFlagDic\r\n    },\r\n    setFlagDic (data, callback) {\r\n      data.forEach(item => {\r\n        if (item.children && item.children.length) { this.setFlagDic(item.children, callback) }\r\n        callback(item)\r\n      })\r\n    },\r\n    handleCheckSelect (selectArray, selectItem) {\r\n      this.$emit('on-check', selectArray)\r\n      this.parent.$emit('on-change', selectArray)\r\n    },\r\n    checkData (data, emit, expandAll) {\r\n      data.forEach(item => {\r\n        if (this.selectedArray.includes(item.id)) {\r\n          this.$set(item, 'checked', true)\r\n          this.checkedArray.push(item)\r\n          if (emit) this.checkEmit(item.id, item.title)\r\n        } else this.$set(item, 'checked', false)\r\n        if (item.children && item.children.length) {\r\n          if (this.expandAll && expandAll) this.$set(item, 'expand', true)\r\n          this.checkData(item.children, emit, expandAll)\r\n        }\r\n      })\r\n    },\r\n    loadDataCallback (item, callback) {\r\n      this.loadData(item, data => {\r\n        return (() => {\r\n          callback(data)\r\n          this.updateFlagDic(this.data)\r\n        })(data)\r\n      })\r\n    }\r\n  },\r\n  mounted () {\r\n    this.checkData(this.data, false, true)\r\n    this.$nextTick(() => {\r\n      this.$emit('on-check', this.checkedArray)\r\n    })\r\n  }\r\n}\r\n",{"version":3,"sources":["tree-select-tree.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"tree-select-tree.vue","sourceRoot":"src/components/tree-select","sourcesContent":["<template>\r\n  <Tree\r\n    :data=\"data\"\r\n    @on-check-change=\"handleCheckSelect\"\r\n    v-on=\"parent.$listeners\"\r\n    v-bind=\"parent.$attrs\"\r\n    :load-data=\"loadDataCallback\"\r\n    show-checkbox\r\n  ></Tree>\r\n</template>\r\n\r\n<script>\r\nimport Emitter from 'iview/src/mixins/emitter.js'\r\n\r\nconst arrayEqual = (arr1, arr2) => {\r\n  // 判断数组的长度\r\n  if (arr1.length !== arr2.length) {\r\n    return false\r\n  } else {\r\n    // 循环遍历数组的值进行比较\r\n    for (let i = 0; i < arr1.length; i++) {\r\n      if (arr1[i] !== arr2[i]) {\r\n        return false\r\n      }\r\n    }\r\n    return true\r\n  }\r\n}\r\n\r\nexport default {\r\n  name: 'TreeSelectTree',\r\n  mixins: [Emitter],\r\n  props: {\r\n    data: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    selectedArray: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    loadData: Function\r\n  },\r\n  data () {\r\n    return {\r\n      flatDic: {},\r\n      checkedArray: []\r\n    }\r\n  },\r\n  inject: ['parent'],\r\n  computed: {\r\n    expandAll () {\r\n      return this.parent.$attrs['expand-all']\r\n    }\r\n  },\r\n  watch: {\r\n    data (newData, oldVal) {\r\n      this.updateFlagDic(newData)\r\n      let selectArray = []\r\n      this.selectedArray.forEach(id => {\r\n        if (id in this.flatDic) selectArray.push(id)\r\n      })\r\n      this.$emit('on-check', selectArray.map(id => this.flatDic[id]))\r\n      if (this.expandAll) this.checkData(newData, false, true)\r\n    },\r\n    selectedArray (newVal, oldVal) {\r\n      if (arrayEqual(newVal, oldVal)) return\r\n      const filtedNewVal = newVal.filter(id => id in this.flatDic)\r\n      this.$emit('on-check', filtedNewVal.map(id => this.flatDic[id]))\r\n      this.$emit('on-clear')\r\n      this.$nextTick(() => {\r\n        this.checkData(this.data, true)\r\n      })\r\n    }\r\n  },\r\n  methods: {\r\n    checkEmit (value, label) {\r\n      this.dispatch('iSelect', 'on-select-selected', {\r\n        value,\r\n        label\r\n      })\r\n      this.$emit('on-select-selected', {\r\n        value,\r\n        label\r\n      })\r\n    },\r\n    updateFlagDic (newData) {\r\n      let newFlagDic = {}\r\n      this.setFlagDic(newData, item => {\r\n        newFlagDic[item.id] = item\r\n      })\r\n      this.flatDic = newFlagDic\r\n    },\r\n    setFlagDic (data, callback) {\r\n      data.forEach(item => {\r\n        if (item.children && item.children.length) { this.setFlagDic(item.children, callback) }\r\n        callback(item)\r\n      })\r\n    },\r\n    handleCheckSelect (selectArray, selectItem) {\r\n      this.$emit('on-check', selectArray)\r\n      this.parent.$emit('on-change', selectArray)\r\n    },\r\n    checkData (data, emit, expandAll) {\r\n      data.forEach(item => {\r\n        if (this.selectedArray.includes(item.id)) {\r\n          this.$set(item, 'checked', true)\r\n          this.checkedArray.push(item)\r\n          if (emit) this.checkEmit(item.id, item.title)\r\n        } else this.$set(item, 'checked', false)\r\n        if (item.children && item.children.length) {\r\n          if (this.expandAll && expandAll) this.$set(item, 'expand', true)\r\n          this.checkData(item.children, emit, expandAll)\r\n        }\r\n      })\r\n    },\r\n    loadDataCallback (item, callback) {\r\n      this.loadData(item, data => {\r\n        return (() => {\r\n          callback(data)\r\n          this.updateFlagDic(this.data)\r\n        })(data)\r\n      })\r\n    }\r\n  },\r\n  mounted () {\r\n    this.checkData(this.data, false, true)\r\n    this.$nextTick(() => {\r\n      this.$emit('on-check', this.checkedArray)\r\n    })\r\n  }\r\n}\r\n</script>\r\n\r\n<style></style>\r\n"]}]}