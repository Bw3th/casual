{"remainingRequest":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\86152\\Desktop\\casual\\iview-admin\\src\\components\\cropper\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\src\\components\\cropper\\index.vue","mtime":1575545426843},{"path":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\86152\\Desktop\\casual\\iview-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport Cropper from 'cropperjs'\r\nimport './index.less'\r\nimport 'cropperjs/dist/cropper.min.css'\r\nexport default {\r\n  name: 'Cropper',\r\n  props: {\r\n    src: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    preview: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    moveStep: {\r\n      type: Number,\r\n      default: 4\r\n    },\r\n    cropButtonText: {\r\n      type: String,\r\n      default: '裁剪'\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      cropper: null,\r\n      insideSrc: ''\r\n    }\r\n  },\r\n  computed: {\r\n    imgId () {\r\n      return `cropper${this._uid}`\r\n    },\r\n    previewId () {\r\n      return `cropper_preview${this._uid}`\r\n    }\r\n  },\r\n  watch: {\r\n    src (src) {\r\n      this.replace(src)\r\n    },\r\n    insideSrc (src) {\r\n      this.replace(src)\r\n    }\r\n  },\r\n  methods: {\r\n    beforeUpload (file) {\r\n      const reader = new FileReader()\r\n      reader.readAsDataURL(file)\r\n      reader.onload = (event) => {\r\n        this.insideSrc = event.srcElement.result\r\n      }\r\n      return false\r\n    },\r\n    replace (src) {\r\n      this.cropper.replace(src)\r\n      this.insideSrc = src\r\n    },\r\n    rotate () {\r\n      this.cropper.rotate(90)\r\n    },\r\n    shrink () {\r\n      this.cropper.zoom(-0.1)\r\n    },\r\n    magnify () {\r\n      this.cropper.zoom(0.1)\r\n    },\r\n    scale (d) {\r\n      this.cropper[`scale${d}`](-this.cropper.getData()[`scale${d}`])\r\n    },\r\n    move (...argu) {\r\n      this.cropper.move(...argu)\r\n    },\r\n    crop () {\r\n      this.cropper.getCroppedCanvas().toBlob(blob => {\r\n        this.$emit('on-crop', blob)\r\n      })\r\n    }\r\n  },\r\n  mounted () {\r\n    this.$nextTick(() => {\r\n      let dom = document.getElementById(this.imgId)\r\n      this.cropper = new Cropper(dom, {\r\n        preview: `#${this.previewId}`,\r\n        checkCrossOrigin: true\r\n      })\r\n    })\r\n  }\r\n}\r\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/cropper","sourcesContent":["<template>\r\n  <div class=\"cropper-wrapper\">\r\n    <div class=\"img-box\">\r\n      <img class=\"cropper-image\" :id=\"imgId\" alt=\"\">\r\n    </div>\r\n    <div class=\"right-con\">\r\n      <div v-if=\"preview\" class=\"preview-box\" :id=\"previewId\"></div>\r\n      <div class=\"button-box\">\r\n        <slot>\r\n          <Upload action=\"image/upload\" :before-upload=\"beforeUpload\">\r\n            <Button style=\"width: 150px;\" type=\"primary\">上传图片</Button>\r\n          </Upload>\r\n        </slot>\r\n        <div v-show=\"insideSrc\">\r\n          <Button type=\"primary\" @click=\"rotate\">\r\n            <Icon type=\"md-refresh\" :size=\"18\"/>\r\n          </Button>\r\n          <Button type=\"primary\" @click=\"shrink\">\r\n            <Icon type=\"md-remove\" :size=\"18\"/>\r\n          </Button>\r\n          <Button type=\"primary\" @click=\"magnify\">\r\n            <Icon type=\"md-add\" :size=\"18\"/>\r\n          </Button>\r\n          <Button type=\"primary\" @click=\"scale('X')\">\r\n            <Icon custom=\"iconfont icon-shuipingfanzhuan\" :size=\"18\"/>\r\n          </Button>\r\n          <Button type=\"primary\" @click=\"scale('Y')\">\r\n            <Icon custom=\"iconfont icon-chuizhifanzhuan\" :size=\"18\"/>\r\n          </Button>\r\n          <Button type=\"primary\" @click=\"move(0, -moveStep)\">\r\n            <Icon type=\"md-arrow-round-up\" :size=\"18\"/>\r\n          </Button>\r\n          <Button type=\"primary\" @click=\"move(-moveStep, 0)\">\r\n            <Icon type=\"md-arrow-round-back\" :size=\"18\"/>\r\n          </Button>\r\n          <Button type=\"primary\" @click=\"move(0, moveStep)\">\r\n            <Icon type=\"md-arrow-round-down\" :size=\"18\"/>\r\n          </Button>\r\n          <Button type=\"primary\" @click=\"move(moveStep, 0)\">\r\n            <Icon type=\"md-arrow-round-forward\" :size=\"18\"/>\r\n          </Button>\r\n          <Button style=\"width: 150px;margin-top: 10px;\" type=\"primary\" @click=\"crop\">{{ cropButtonText }}</Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Cropper from 'cropperjs'\r\nimport './index.less'\r\nimport 'cropperjs/dist/cropper.min.css'\r\nexport default {\r\n  name: 'Cropper',\r\n  props: {\r\n    src: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    preview: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    moveStep: {\r\n      type: Number,\r\n      default: 4\r\n    },\r\n    cropButtonText: {\r\n      type: String,\r\n      default: '裁剪'\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      cropper: null,\r\n      insideSrc: ''\r\n    }\r\n  },\r\n  computed: {\r\n    imgId () {\r\n      return `cropper${this._uid}`\r\n    },\r\n    previewId () {\r\n      return `cropper_preview${this._uid}`\r\n    }\r\n  },\r\n  watch: {\r\n    src (src) {\r\n      this.replace(src)\r\n    },\r\n    insideSrc (src) {\r\n      this.replace(src)\r\n    }\r\n  },\r\n  methods: {\r\n    beforeUpload (file) {\r\n      const reader = new FileReader()\r\n      reader.readAsDataURL(file)\r\n      reader.onload = (event) => {\r\n        this.insideSrc = event.srcElement.result\r\n      }\r\n      return false\r\n    },\r\n    replace (src) {\r\n      this.cropper.replace(src)\r\n      this.insideSrc = src\r\n    },\r\n    rotate () {\r\n      this.cropper.rotate(90)\r\n    },\r\n    shrink () {\r\n      this.cropper.zoom(-0.1)\r\n    },\r\n    magnify () {\r\n      this.cropper.zoom(0.1)\r\n    },\r\n    scale (d) {\r\n      this.cropper[`scale${d}`](-this.cropper.getData()[`scale${d}`])\r\n    },\r\n    move (...argu) {\r\n      this.cropper.move(...argu)\r\n    },\r\n    crop () {\r\n      this.cropper.getCroppedCanvas().toBlob(blob => {\r\n        this.$emit('on-crop', blob)\r\n      })\r\n    }\r\n  },\r\n  mounted () {\r\n    this.$nextTick(() => {\r\n      let dom = document.getElementById(this.imgId)\r\n      this.cropper = new Cropper(dom, {\r\n        preview: `#${this.previewId}`,\r\n        checkCrossOrigin: true\r\n      })\r\n    })\r\n  }\r\n}\r\n</script>\r\n"]}]}