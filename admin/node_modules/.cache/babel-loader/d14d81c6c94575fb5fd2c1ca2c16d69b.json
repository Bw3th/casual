{"remainingRequest":"C:\\Users\\86152\\Desktop\\casual\\admin\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\86152\\Desktop\\casual\\admin\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\86152\\Desktop\\casual\\admin\\src\\libs\\excel.js","dependencies":[{"path":"C:\\Users\\86152\\Desktop\\casual\\admin\\src\\libs\\excel.js","mtime":1575545426885},{"path":"C:\\Users\\86152\\Desktop\\casual\\admin\\.babelrc","mtime":1575545426802},{"path":"C:\\Users\\86152\\Desktop\\casual\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\86152\\Desktop\\casual\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\86152\\Desktop\\casual\\admin\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.typed.uint8-array\";\nimport \"core-js/modules/es6.regexp.to-string\";\n\n/* eslint-disable */\nimport XLSX from 'xlsx';\n\nfunction auto_width(ws, data) {\n  /*set worksheet max width per col*/\n  var colWidth = data.map(function (row) {\n    return row.map(function (val) {\n      /*if null/undefined*/\n      if (val == null) {\n        return {\n          'wch': 10\n        };\n      }\n      /*if chinese*/\n      else if (val.toString().charCodeAt(0) > 255) {\n          return {\n            'wch': val.toString().length * 2\n          };\n        } else {\n          return {\n            'wch': val.toString().length\n          };\n        }\n    });\n  });\n  /*start in the first row*/\n\n  var result = colWidth[0];\n\n  for (var i = 1; i < colWidth.length; i++) {\n    for (var j = 0; j < colWidth[i].length; j++) {\n      if (result[j]['wch'] < colWidth[i][j]['wch']) {\n        result[j]['wch'] = colWidth[i][j]['wch'];\n      }\n    }\n  }\n\n  ws['!cols'] = result;\n}\n\nfunction json_to_array(key, jsonData) {\n  return jsonData.map(function (v) {\n    return key.map(function (j) {\n      return v[j];\n    });\n  });\n} // fix data,return string\n\n\nfunction fixdata(data) {\n  var o = '';\n  var l = 0;\n  var w = 10240;\n\n  for (; l < data.byteLength / w; ++l) {\n    o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w, l * w + w)));\n  }\n\n  o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w)));\n  return o;\n} // get head from excel file,return array\n\n\nfunction get_header_row(sheet) {\n  var headers = [];\n  var range = XLSX.utils.decode_range(sheet['!ref']);\n  var C;\n  var R = range.s.r;\n  /* start in the first row */\n\n  for (C = range.s.c; C <= range.e.c; ++C) {\n    /* walk every column in the range */\n    var cell = sheet[XLSX.utils.encode_cell({\n      c: C,\n      r: R\n    })];\n    /* find the cell in the first row */\n\n    var hdr = 'UNKNOWN ' + C; // <-- replace with your desired default\n\n    if (cell && cell.t) hdr = XLSX.utils.format_cell(cell);\n    headers.push(hdr);\n  }\n\n  return headers;\n}\n\nexport var export_table_to_excel = function export_table_to_excel(id, filename) {\n  var table = document.getElementById(id);\n  var wb = XLSX.utils.table_to_book(table);\n  XLSX.writeFile(wb, filename);\n  /* the second way */\n  // const table = document.getElementById(id);\n  // const wb = XLSX.utils.book_new();\n  // const ws = XLSX.utils.table_to_sheet(table);\n  // XLSX.utils.book_append_sheet(wb, ws, filename);\n  // XLSX.writeFile(wb, filename);\n};\nexport var export_json_to_excel = function export_json_to_excel(_ref) {\n  var data = _ref.data,\n      key = _ref.key,\n      title = _ref.title,\n      filename = _ref.filename,\n      autoWidth = _ref.autoWidth;\n  var wb = XLSX.utils.book_new();\n  data.unshift(title);\n  var ws = XLSX.utils.json_to_sheet(data, {\n    header: key,\n    skipHeader: true\n  });\n\n  if (autoWidth) {\n    var arr = json_to_array(key, data);\n    auto_width(ws, arr);\n  }\n\n  XLSX.utils.book_append_sheet(wb, ws, filename);\n  XLSX.writeFile(wb, filename + '.xlsx');\n};\nexport var export_array_to_excel = function export_array_to_excel(_ref2) {\n  var key = _ref2.key,\n      data = _ref2.data,\n      title = _ref2.title,\n      filename = _ref2.filename,\n      autoWidth = _ref2.autoWidth;\n  var wb = XLSX.utils.book_new();\n  var arr = json_to_array(key, data);\n  arr.unshift(title);\n  var ws = XLSX.utils.aoa_to_sheet(arr);\n\n  if (autoWidth) {\n    auto_width(ws, arr);\n  }\n\n  XLSX.utils.book_append_sheet(wb, ws, filename);\n  XLSX.writeFile(wb, filename + '.xlsx');\n};\nexport var read = function read(data, type) {\n  /* if type == 'base64' must fix data first */\n  // const fixedData = fixdata(data)\n  // const workbook = XLSX.read(btoa(fixedData), { type: 'base64' })\n  var workbook = XLSX.read(data, {\n    type: type\n  });\n  var firstSheetName = workbook.SheetNames[0];\n  var worksheet = workbook.Sheets[firstSheetName];\n  var header = get_header_row(worksheet);\n  var results = XLSX.utils.sheet_to_json(worksheet);\n  return {\n    header: header,\n    results: results\n  };\n};\nexport default {\n  export_table_to_excel: export_table_to_excel,\n  export_array_to_excel: export_array_to_excel,\n  export_json_to_excel: export_json_to_excel,\n  read: read\n};",{"version":3,"sources":["C:/Users/86152/Desktop/casual/admin/src/libs/excel.js"],"names":["XLSX","auto_width","ws","data","colWidth","map","row","val","toString","charCodeAt","length","result","i","j","json_to_array","key","jsonData","v","fixdata","o","l","w","byteLength","String","fromCharCode","apply","Uint8Array","slice","get_header_row","sheet","headers","range","utils","decode_range","C","R","s","r","c","e","cell","encode_cell","hdr","t","format_cell","push","export_table_to_excel","id","filename","table","document","getElementById","wb","table_to_book","writeFile","export_json_to_excel","title","autoWidth","book_new","unshift","json_to_sheet","header","skipHeader","arr","book_append_sheet","export_array_to_excel","aoa_to_sheet","read","type","workbook","firstSheetName","SheetNames","worksheet","Sheets","results","sheet_to_json"],"mappings":"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","sourcesContent":["/* eslint-disable */\r\nimport XLSX from 'xlsx';\r\n\r\nfunction auto_width(ws, data){\r\n    /*set worksheet max width per col*/\r\n    const colWidth = data.map(row => row.map(val => {\r\n        /*if null/undefined*/\r\n        if (val == null) {\r\n            return {'wch': 10};\r\n        }\r\n        /*if chinese*/\r\n        else if (val.toString().charCodeAt(0) > 255) {\r\n            return {'wch': val.toString().length * 2};\r\n        } else {\r\n            return {'wch': val.toString().length};\r\n        }\r\n    }))\r\n    /*start in the first row*/\r\n    let result = colWidth[0];\r\n    for (let i = 1; i < colWidth.length; i++) {\r\n        for (let j = 0; j < colWidth[i].length; j++) {\r\n            if (result[j]['wch'] < colWidth[i][j]['wch']) {\r\n                result[j]['wch'] = colWidth[i][j]['wch'];\r\n            }\r\n        }\r\n    }\r\n    ws['!cols'] = result;\r\n}\r\n\r\nfunction json_to_array(key, jsonData){\r\n    return jsonData.map(v => key.map(j => { return v[j] }));\r\n}\r\n\r\n// fix data,return string\r\nfunction fixdata(data) {\r\n    let o = ''\r\n    let l = 0\r\n    const w = 10240\r\n    for (; l < data.byteLength / w; ++l) o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w, l * w + w)))\r\n    o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w)))\r\n    return o\r\n}\r\n\r\n// get head from excel file,return array\r\nfunction get_header_row(sheet) {\r\n    const headers = []\r\n    const range = XLSX.utils.decode_range(sheet['!ref'])\r\n    let C\r\n    const R = range.s.r /* start in the first row */\r\n    for (C = range.s.c; C <= range.e.c; ++C) { /* walk every column in the range */\r\n        var cell = sheet[XLSX.utils.encode_cell({ c: C, r: R })] /* find the cell in the first row */\r\n        var hdr = 'UNKNOWN ' + C // <-- replace with your desired default\r\n        if (cell && cell.t) hdr = XLSX.utils.format_cell(cell)\r\n        headers.push(hdr)\r\n    }\r\n    return headers\r\n}\r\n\r\nexport const export_table_to_excel= (id, filename) => {\r\n    const table = document.getElementById(id);\r\n    const wb = XLSX.utils.table_to_book(table);\r\n    XLSX.writeFile(wb, filename);\r\n\r\n    /* the second way */\r\n    // const table = document.getElementById(id);\r\n    // const wb = XLSX.utils.book_new();\r\n    // const ws = XLSX.utils.table_to_sheet(table);\r\n    // XLSX.utils.book_append_sheet(wb, ws, filename);\r\n    // XLSX.writeFile(wb, filename);\r\n}\r\n\r\nexport const export_json_to_excel = ({data, key, title, filename, autoWidth}) => {\r\n    const wb = XLSX.utils.book_new();\r\n    data.unshift(title);\r\n    const ws = XLSX.utils.json_to_sheet(data, {header: key, skipHeader: true});\r\n    if(autoWidth){\r\n        const arr = json_to_array(key, data);\r\n        auto_width(ws, arr);\r\n    }\r\n    XLSX.utils.book_append_sheet(wb, ws, filename);\r\n    XLSX.writeFile(wb, filename + '.xlsx');\r\n}\r\n\r\nexport const export_array_to_excel = ({key, data, title, filename, autoWidth}) => {\r\n    const wb = XLSX.utils.book_new();\r\n    const arr = json_to_array(key, data);\r\n    arr.unshift(title);\r\n    const ws = XLSX.utils.aoa_to_sheet(arr);\r\n    if(autoWidth){\r\n        auto_width(ws, arr);\r\n    }\r\n    XLSX.utils.book_append_sheet(wb, ws, filename);\r\n    XLSX.writeFile(wb, filename + '.xlsx');\r\n}\r\n\r\nexport const read = (data, type) => {\r\n    /* if type == 'base64' must fix data first */\r\n    // const fixedData = fixdata(data)\r\n    // const workbook = XLSX.read(btoa(fixedData), { type: 'base64' })\r\n    const workbook = XLSX.read(data, { type: type });\r\n    const firstSheetName = workbook.SheetNames[0];\r\n    const worksheet = workbook.Sheets[firstSheetName];\r\n    const header = get_header_row(worksheet);\r\n    const results = XLSX.utils.sheet_to_json(worksheet);\r\n    return {header, results};\r\n}\r\n\r\nexport default {\r\n  export_table_to_excel,\r\n  export_array_to_excel,\r\n  export_json_to_excel,\r\n  read\r\n}\r\n"]}]}